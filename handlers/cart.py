from aiogram import types, Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from keyboards.cart import get_cart_keyboard
from keyboards.main import get_main_menu
from data.usersdb import initialize_users_db, get_user_info, save_order_to_db, get_order_history_from_db
from utils.storage import user_data
from datetime import datetime

router = Router()

class OrderStates(StatesGroup):
    confirming_order = State()

def format_cart(user_id: int) -> str:
    cart = user_data.get(user_id, {}).get('cart', {})
    if not cart:
        return "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞."

    total_cost = 0
    cart_items = []

    for item_id, item in cart.items():
        item_total = item['price'] * item['quantity']
        total_cost += item_total
        cart_items.append(
            f"üõí *{item['name']}*\n"
            f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item['quantity']} —à—Ç.\n"
            f"   –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É: {item['price']} —Ä—É–±.\n"
            f"   –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {item_total} —Ä—É–±.\n"
            "----------------------------------------"
        )

    result = "\n".join(cart_items) + f"\n\n*–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:* {total_cost} —Ä—É–±."
    return result

@router.message(F.text == "üõç –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É")
async def show_cart(message: types.Message):
    user_id = message.from_user.id
    initialize_users_db()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cart_info = format_cart(user_id)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üõí –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω–æ–π")],
            [KeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É")],
            [KeyboardButton(text="üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
    await message.answer(cart_info, reply_markup=keyboard)

@router.message(F.text == "üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É")
async def clear_cart(message: types.Message):
    user_id = message.from_user.id
    initialize_users_db()
    user_data[user_id]['cart'] = {}
    await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –±—ã–ª–∞ –æ—á–∏—â–µ–Ω–∞.", reply_markup=get_main_menu())

@router.message(F.text == "üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
async def handle_order(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    initialize_users_db()

    if not user_data.get(user_id, {}).get('cart'):
        await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞.")
        return

    user_info = get_user_info(user_id)

    if not user_info.get('name') or not user_info.get('phone') or not user_info.get('address'):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ (–∏–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω, –∞–¥—Ä–µ—Å) –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞.")
        return

    cart_info = format_cart(user_id)
    confirmation_message = (
        f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:\n\n{cart_info}\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –≤–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –∫–æ—Ä–∑–∏–Ω—É."
    )

    await message.answer(confirmation_message, reply_markup=ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    ))
    await state.set_state(OrderStates.confirming_order)

@router.message(OrderStates.confirming_order)
async def handle_order_confirmation(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    if message.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑":
        user_info = get_user_info(user_id)
        cart_info = format_cart(user_id)
        order_message = (
            f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç {user_info.get('name')}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {user_info.get('phone')}\n"
            f"–ê–¥—Ä–µ—Å: {user_info.get('address')}\n\n"
            f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã:\n{cart_info}"
        )

        special_chat_id = -1002162957894  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —á–∞—Ç–∞
        try:
            await message.bot.send_message(special_chat_id, order_message)
            await message.answer(
                "–í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!",
                reply_markup=get_main_menu()
            )

            save_order_to_db(user_id, order_message)

        except Exception as e:
            await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑: {e}")

        user_data[user_id]['cart'] = {}  # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
        await state.clear()
    elif message.text == "üîô –ù–∞–∑–∞–¥":
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∫–æ—Ä–∑–∏–Ω—É.", reply_markup=get_cart_keyboard())
        await state.clear()
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç.")


@router.message(F.text == "üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤")
async def show_order_history(message: types.Message):
    user_id = message.from_user.id
    initialize_users_db()
    history_info = format_order_history(user_id)

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ Telegram
    max_message_length = 4096

    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ
    if len(history_info) > max_message_length:
        for i in range(0, len(history_info), max_message_length):
            await message.answer(history_info[i:i + max_message_length], reply_markup=get_main_menu())
    else:
        await message.answer(history_info, reply_markup=get_main_menu())


def format_order_history(user_id: int) -> str:
    history = get_order_history_from_db(user_id)
    if not history:
        return "üì¶ –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø—É—Å—Ç–∞."

    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
    history_entries = []

    for entry in history:
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø –∏ —É–ª—É—á—à–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        details_formatted = entry['details'].replace('\n', '\n   ')
        formatted_entry = (
            f"üóìÔ∏è **–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:** {entry['time']}\n"
            f"üìú **–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:**\n"
            f"   {details_formatted}\n"  # –û—Ç—Å—Ç—É–ø –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞
            f"{'‚≠ê' * 13}\n"  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –∑–∞–ø–∏—Å—è–º–∏
        )
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞, —á—Ç–æ–±—ã –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –±—ã–ª–∏ –≤–Ω–∏–∑—É
        history_entries.insert(0, formatted_entry)

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∑–∞–ø–∏—Å–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    formatted_history = "\n".join(history_entries)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä–æ–∫—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
    return (
        "üìã **–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤:**\n"
        f"{'‚ïê' * 13}\n"  # –õ–∏–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        f"{formatted_history}"
    )

@router.message(F.text)
async def handle_all_buttons(message: types.Message, state: FSMContext):
    if message.text == "üõç –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É":
        await show_cart(message)
    elif message.text == "üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É":
        await clear_cart(message)
    elif message.text == "üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤":
        await show_order_history(message)
    elif message.text == "üîô –ù–∞–∑–∞–¥":
        await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_menu())
    elif message.text == "üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑":
        await handle_order(message, state)
    else:
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
