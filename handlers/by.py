from aiogram import types, Router, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from keyboards.cart import get_cart_keyboard
from utils.storage import user_data, initialize_user
from keyboards.main import get_main_menu
from handlers.cart import format_cart

router = Router()

class OrderStates(StatesGroup):
    confirming_order = State()

@router.message(F.text == "üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
async def start_order_confirmation(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    initialize_user(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ—Ä–∑–∏–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞
    if not user_data[user_id].get('cart'):
        await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    user_info = user_data[user_id]
    if not all(user_info.get(key) for key in ['name', 'phone', 'address']):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ (–∏–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω, –∞–¥—Ä–µ—Å) –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞.")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        return

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    cart_info = format_cart(user_id)
    confirmation_message = (
        f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:\n\n{cart_info}\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –≤–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –∫–æ—Ä–∑–∏–Ω—É."
    )

    await message.answer(confirmation_message, reply_markup=ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    ))
    await state.set_state(OrderStates.confirming_order)

@router.message(OrderStates.confirming_order)
async def handle_order_confirmation(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    if message.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑":
        user_info = user_data[user_id]
        cart_info = format_cart(user_id)
        order_message = (
            f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç {user_info['name']}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {user_info['phone']}\n"
            f"–ê–¥—Ä–µ—Å: {user_info['address']}\n\n"
            f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã:\n{cart_info}"
        )

        special_chat_id = -1002162957894  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —á–∞—Ç–∞
        try:
            await message.bot.send_message(special_chat_id, order_message)
            await message.answer("–í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!",
                                 reply_markup=get_main_menu())
        except Exception as e:
            await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑: {e}")
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –º–æ–∂–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

        user_data[user_id]['cart'] = {}  # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
        await state.clear()
    elif message.text == "üîô –ù–∞–∑–∞–¥":
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∫–æ—Ä–∑–∏–Ω—É.", reply_markup=get_cart_keyboard())
        await state.clear()
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç.")
