import re
import asyncio
from PIL import Image
import tempfile
import os
from aiogram import types, Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, InputFile, FSInputFile
from keyboards.main import get_main_menu
from keyboards.category import get_category_menu
from utils.database import get_manufacturers_by_category, get_products_by_category, get_products_by_manufacturer, \
    get_product_by_name
from utils.storage import user_data, initialize_user
from data.descriptions import get_category_description, get_manufacturer_description, get_manufacturer_image# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏–π

router = Router()


class Goods(StatesGroup):
    category = State()
    manufacturer = State()
    product_selection = State()
    quantity = State()
    cart = State()


@router.message(F.text == "üõí –¢–æ–≤–∞—Ä—ã")
async def show_goods(message: types.Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=get_category_menu())
    await state.set_state(Goods.category)


@router.message(Goods.category)
async def handle_category_selection(message: types.Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.clear()  # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_menu())
        return

    category = re.sub(r'[^\w\s]', '', message.text).strip()

    # –ü–æ–ª—É—á–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category_description = get_category_description(category)
    await message.answer(f"*–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}':*\n{category_description}", parse_mode="Markdown")

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    manufacturers = get_manufacturers_by_category(category)

    if manufacturers:
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è
        buttons = [KeyboardButton(text=manufacturer) for manufacturer in manufacturers]
        buttons.append(KeyboardButton(text="üîô –ù–∞–∑–∞–¥"))
        keyboard = ReplyKeyboardMarkup(
            keyboard=[buttons[i:i + 2] for i in range(0, len(buttons), 2)],
            resize_keyboard=True
        )
        await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}':", reply_markup=keyboard)
        await state.update_data(selected_category=category, selected_manufacturer=None)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.set_state(Goods.manufacturer)
    else:
        # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π –Ω–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç
        products = get_products_by_category(category)
        if products:
            buttons = [KeyboardButton(text=f"{product['name']} - {product['price']} —Ä—É–±.") for product in products]
            buttons.append(KeyboardButton(text="üîô –ù–∞–∑–∞–¥"))
            keyboard = ReplyKeyboardMarkup(
                keyboard=[buttons[i:i + 2] for i in range(0, len(buttons), 2)],
                resize_keyboard=True
            )
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É:", reply_markup=keyboard)
            await state.update_data(selected_category=category)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            await state.set_state(Goods.product_selection)
        else:
            await message.answer("–ü—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=get_category_menu())


async def compress_image(input_path, quality=80):
    """–°–∂–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –≤–µ—Ä–Ω—É—Ç—å –ø—É—Ç—å –∫ —Å–∂–∞—Ç–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é."""
    loop = asyncio.get_event_loop()  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π
    compressed_image_path = await loop.run_in_executor(None, _compress_image, input_path, quality)
    return compressed_image_path

def _compress_image(input_path, quality):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Å–∂–∞—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    with Image.open(input_path) as img:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ä–µ–∂–∏–º RGB, –µ—Å–ª–∏ –æ–Ω–æ –≤ —Ä–µ–∂–∏–º–µ RGBA
        if img.mode == 'RGBA':
            img = img.convert('RGB')

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Å–∂–∞—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        with tempfile.NamedTemporaryFile(delete=False, suffix=".jpg") as temp_file:
            img.save(temp_file.name, "JPEG", quality=quality)
            return temp_file.name

@router.message(Goods.manufacturer)
async def handle_manufacturer_selection(message: types.Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.update_data(selected_manufacturer=None)  # –û—á–∏—Å—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=get_category_menu())
        await state.set_state(Goods.category)
        return

    manufacturer = message.text

    # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è
    description = get_manufacturer_description(manufacturer)

    # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è
    image_path = get_manufacturer_image(manufacturer)

    # –°–∂–∏–º–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    try:
        compressed_image_path = await compress_image(image_path)
        # –ü–µ—Ä–µ–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –ø–æ–∑–≤–æ–ª—è–µ—Ç
        if os.path.getsize(compressed_image_path) < 5 * 1024 * 1024:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (5 MB)
            photo = FSInputFile(compressed_image_path)  # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç FSInputFile —Å –ø—É—Ç–µ–º –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–º–µ—Å—Ç–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
            await message.answer_photo(photo, caption=description)
        else:
            await message.answer("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ.")

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        os.remove(compressed_image_path)

    except FileNotFoundError:
        await message.answer(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è '{manufacturer}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—é
    products = get_products_by_manufacturer(manufacturer)

    if products:
        buttons = [KeyboardButton(text=f"{product['name']} - {product['price']} —Ä—É–±.") for product in products]
        buttons.append(KeyboardButton(text="üîô –ù–∞–∑–∞–¥"))
        keyboard = ReplyKeyboardMarkup(
            keyboard=[buttons[i:i + 2] for i in range(0, len(buttons), 2)],
            resize_keyboard=True
        )
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É:", reply_markup=keyboard)
        await state.update_data(selected_manufacturer=manufacturer)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.set_state(Goods.product_selection)
    else:
        await message.answer("–ü—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=get_category_menu())


@router.message(Goods.product_selection)
async def select_product(message: types.Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        data = await state.get_data()
        category = data.get("selected_category", "")
        manufacturer = data.get("selected_manufacturer", "")

        if manufacturer:
            manufacturers = get_manufacturers_by_category(category)
            if manufacturers:
                buttons = [KeyboardButton(text=manufacturer) for manufacturer in manufacturers]
                buttons.append(KeyboardButton(text="üîô –ù–∞–∑–∞–¥"))
                keyboard = ReplyKeyboardMarkup(
                    keyboard=[buttons[i:i + 2] for i in range(0, len(buttons), 2)],
                    resize_keyboard=True
                )
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è:", reply_markup=keyboard)
                await state.set_state(Goods.manufacturer)
            else:
                products = get_products_by_category(category)
                if products:
                    buttons = [KeyboardButton(text=f"{product['name']} - {product['price']} —Ä—É–±.") for product in products]
                    buttons.append(KeyboardButton(text="üîô –ù–∞–∑–∞–¥"))
                    keyboard = ReplyKeyboardMarkup(
                        keyboard=[buttons[i:i + 2] for i in range(0, len(buttons), 2)],
                        resize_keyboard=True
                    )
                    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É:", reply_markup=keyboard)
                    await state.set_state(Goods.product_selection)
                else:
                    await message.answer("–ü—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=get_category_menu())
        else:
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=get_category_menu())
            await state.set_state(Goods.category)
        return

    product_info = message.text.split(" - ")
    if len(product_info) == 2:
        product_name = product_info[0]
        product = get_product_by_name(product_name)

        if product:
            await message.answer(
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ–¥—É–∫—Ç: {product['name']}. –¶–µ–Ω–∞: {product['price']} —Ä—É–±.\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:"
            )
            await state.update_data(selected_product=product)
            await state.set_state(Goods.quantity)
            # –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ 'üîô –ù–∞–∑–∞–¥':", reply_markup=keyboard)
        else:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥—É–∫—Ç–µ.")
    else:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –∏–∑ —Å–ø–∏—Å–∫–∞.")



@router.message(Goods.quantity)
async def handle_quantity(message: types.Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        data = await state.get_data()
        manufacturer = data.get("selected_manufacturer", "")

        if manufacturer:
            products = get_products_by_manufacturer(manufacturer)
            buttons = [KeyboardButton(text=f"{product['name']} - {product['price']} —Ä—É–±.") for product in products]
            buttons.append(KeyboardButton(text="üîô –ù–∞–∑–∞–¥"))
            keyboard = ReplyKeyboardMarkup(keyboard=[buttons[i:i + 2] for i in range(0, len(buttons), 2)],
                                           resize_keyboard=True)
            await message.answer(f"–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –æ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è '{manufacturer}'.",
                                 reply_markup=keyboard)
            await state.set_state(Goods.product_selection)
        else:
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=get_category_menu())
            await state.set_state(Goods.category)
        return

    if message.text.isdigit():
        quantity = int(message.text)
        data = await state.get_data()
        product = data.get('selected_product')

        if product:
            user_id = message.from_user.id
            initialize_user(user_id)
            cart = user_data[user_id].get('cart', {})
            product_id = product['name']
            if product_id in cart:
                cart[product_id]['quantity'] += quantity
            else:
                cart[product_id] = {
                    'name': product['name'],
                    'price': product['price'],
                    'quantity': quantity
                }
            user_data[user_id]['cart'] = cart

            cart_info = format_cart(user_id)
            await message.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {quantity} —à—Ç. {product['name']} –≤ –∫–æ—Ä–∑–∏–Ω—É.\n\n{cart_info}")

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤
            manufacturer = data.get("selected_manufacturer", "")
            if manufacturer:
                products = get_products_by_manufacturer(manufacturer)
                buttons = [KeyboardButton(text=f"{product['name']} - {product['price']} —Ä—É–±.") for product in products]
                buttons.append(KeyboardButton(text="üîô –ù–∞–∑–∞–¥"))
                keyboard = ReplyKeyboardMarkup(keyboard=[buttons[i:i + 2] for i in range(0, len(buttons), 2)],
                                               resize_keyboard=True)
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É:", reply_markup=keyboard)
                await state.set_state(Goods.product_selection)
            else:
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=get_category_menu())
                await state.set_state(Goods.category)
        else:
            await message.answer("–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç —Å–Ω–æ–≤–∞.")
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞.")

def format_cart(user_id: int) -> str:
    cart = user_data.get(user_id, {}).get('cart', {})
    if not cart:
        return "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞."

    total_cost = 0
    cart_items = []

    for item_id, item in cart.items():
        item_total = item['price'] * item['quantity']
        total_cost += item_total
        cart_items.append(
            f"üõí *{item['name']}*\n"
            f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item['quantity']} —à—Ç.\n"
            f"   –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É: {item['price']} —Ä—É–±.\n"
            f"   –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {item_total} —Ä—É–±.\n"
            "----------------------------------------"
        )

    result = "\n".join(cart_items) + f"\n\n*–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:* {total_cost} —Ä—É–±."
    return result
