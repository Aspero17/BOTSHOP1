import logging
from aiogram import types, Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.exceptions import TelegramBadRequest
from utils.storage import user_data, add_to_cart, remove_from_cart
import hashlib

router = Router()

def generate_short_id(item_id: str) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö—ç—à–∞."""
    return hashlib.md5(item_id.encode()).hexdigest()[:8]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–µ 8 —Å–∏–º–≤–æ–ª–æ–≤ —Ö—ç—à–∞

def format_cart(user_id: int) -> str:
    cart = user_data.get(user_id, {}).get('cart', {})
    if not cart:
        return "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞."

    total_cost = 0
    cart_items = []

    for item_id, item in cart.items():
        item_total = item['price'] * item['quantity']
        total_cost += item_total
        cart_items.append(
            f"üõí *{item['name']}*\n"
            f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item['quantity']} —à—Ç.\n"
            f"   –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É: {item['price']} —Ä—É–±.\n"
            f"   –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {item_total} —Ä—É–±.\n"
            "----------------------------------------"
        )

    result = "\n".join(cart_items) + f"\n\n*–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:* {total_cost} —Ä—É–±."
    return result

def get_cart_keyboard(user_id: int) -> InlineKeyboardMarkup:
    cart = user_data.get(user_id, {}).get('cart', {})
    keyboard = []

    for item_id, item in cart.items():
        item_name = item['name']
        short_item_id = generate_short_id(item_id)  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä

        keyboard.append([
            InlineKeyboardButton(text=f"üîΩ –£–º–µ–Ω—å—à–∏—Ç—å {item_name}", callback_data=f"decrease_{short_item_id}"),
            InlineKeyboardButton(text=f"üîº –£–≤–µ–ª–∏—á–∏—Ç—å {item_name}", callback_data=f"increase_{short_item_id}"),
            InlineKeyboardButton(text=f"üóë –£–¥–∞–ª–∏—Ç—å {item_name}", callback_data=f"delete_{short_item_id}")
        ])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def find_item_id(short_id: str, user_id: int) -> str:
    """–ü–æ–∏—Å–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –ø–æ –∫–æ—Ä–æ—Ç–∫–æ–º—É ID."""
    for item_id in user_data.get(user_id, {}).get('cart', {}):
        if generate_short_id(item_id) == short_id:
            return item_id
    return None

@router.message(F.text == "üõí –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω–æ–π")
async def manage_cart(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    cart_text = format_cart(user_id)
    await message.answer(
        f"–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n{cart_text}",
        reply_markup=get_cart_keyboard(user_id)
    )
    await state.set_state("MANAGING_CART")

@router.callback_query(lambda c: c.data and c.data.startswith('decrease_'))
async def callback_decrease(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    short_item_id = callback_query.data.split('_')[1]

    item_id = find_item_id(short_item_id, user_id)
    if item_id:
        item = user_data[user_id]['cart'][item_id]
        add_to_cart(user_id, item_id, quantity=-1, price=item['price'], name=item['name'])
        await update_cart_message(callback_query.message, user_id)
        await callback_query.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ —É–º–µ–Ω—å—à–µ–Ω–æ.")
    else:
        logging.warning(f"Item '{short_item_id}' not found in cart.")
        await callback_query.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ.")

@router.callback_query(lambda c: c.data and c.data.startswith('increase_'))
async def callback_increase(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    short_item_id = callback_query.data.split('_')[1]

    item_id = find_item_id(short_item_id, user_id)
    if item_id:
        item = user_data[user_id]['cart'][item_id]
        add_to_cart(user_id, item_id, quantity=1, price=item['price'], name=item['name'])
        await update_cart_message(callback_query.message, user_id)
        await callback_query.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ —É–≤–µ–ª–∏—á–µ–Ω–æ.")
    else:
        logging.warning(f"Item '{short_item_id}' not found in cart.")
        await callback_query.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ.")

@router.callback_query(lambda c: c.data and c.data.startswith('delete_'))
async def callback_delete(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    short_item_id = callback_query.data.split('_')[1]

    item_id = find_item_id(short_item_id, user_id)
    if item_id:
        remove_from_cart(user_id, item_id)
        await update_cart_message(callback_query.message, user_id)
        await callback_query.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.")
    else:
        logging.warning(f"Item '{short_item_id}' not found in cart.")
        await callback_query.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ.")

@router.callback_query(lambda c: c.data == 'back')
async def callback_back(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.delete()
    await callback_query.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
    await state.clear()

async def update_cart_message(message: types.Message, user_id: int):
    if message.text:
        cart_text = format_cart(user_id)
        new_markup = get_cart_keyboard(user_id)

        logging.info(f"Current message text: {message.text}")
        logging.info(f"New cart text: {cart_text}")

        try:
            await message.edit_text(
                f"–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n{cart_text}",
                reply_markup=new_markup
            )
        except TelegramBadRequest as e:
            logging.error(f"Failed to update cart message: {e}")
            if "message is not modified" not in str(e):
                raise
    else:
        logging.warning("Message text is empty, cannot update.")
