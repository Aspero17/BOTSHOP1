import logging
import json  # –ò—Å–ø–æ–ª—å–∑—É–µ–º json –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤ –≤ —Å—Ç—Ä–æ–∫–∏
from aiogram import types, Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from keyboards.profile import get_profile_menu
from keyboards.main import get_main_menu
from data.usersdb import update_user, get_user_info, get_order_history_from_db

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è
class Profile(StatesGroup):
    change_phone = State()
    add_additional_phone = State()
    change_address = State()
    change_name = State()

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@router.message(F.text == "üìû –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä")
async def change_phone(message: types.Message, state: FSMContext):
    logging.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª '–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä'")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(Profile.change_phone)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ–ø –Ω–æ–º–µ—Ä")
async def add_additional_phone(message: types.Message, state: FSMContext):
    logging.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª '–î–æ–±–∞–≤–∏—Ç—å –¥–æ–ø –Ω–æ–º–µ—Ä'")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(Profile.add_additional_phone)

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
@router.message(F.text == "üìç –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å")
async def change_address_start(message: types.Message, state: FSMContext):
    logging.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª '–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å'")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
    await state.set_state(Profile.change_address)

# –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫
@router.message(F.text == "üõç –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫")
async def purchase_history(message: types.Message):
    logging.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª '–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫'")
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    order_history = get_order_history_from_db(user_id)

    if order_history:
        # –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –±—ã–ª–∏ —Å–≤–µ—Ä—Ö—É
        order_history = order_history[::-1]
        history_info = "\n".join(
            f"–í—Ä–µ–º—è: {entry['time']}\n\n{entry['details']}\n\n" for entry in order_history
        )
    else:
        history_info = "–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫ –ø—É—Å—Ç–∞."

    await message.answer(history_info, reply_markup=get_profile_menu())

# –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.message(F.text == "‚¨Ö –ù–∞–∑–∞–¥")
async def go_back(message: types.Message, state: FSMContext):
    logging.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª '–ù–∞–∑–∞–¥'")
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_menu())
    await state.clear()

# –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è
@router.message(F.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def view_profile(message: types.Message):
    logging.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å'")
    user_info = get_user_info(message.from_user.id)

    if user_info:
        profile_info = (
            f"–ò–º—è: {user_info.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {user_info.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"–ê–¥—Ä–µ—Å: {user_info.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞: {', '.join(user_info.get('additional_phones', [])) or '–ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤'}"
        )
        await message.answer(profile_info, reply_markup=get_profile_menu())
    else:
        await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@router.message(Profile.change_phone)
async def update_phone(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        return
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–∏–ª –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {message.text}")

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    update_user(message.from_user.id, phone=message.text)

    await message.answer("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω.", reply_markup=get_profile_menu())
    await state.clear()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@router.message(Profile.add_additional_phone)
async def add_additional_phone(message: types.Message, state: FSMContext):
    user_info = get_user_info(message.from_user.id)

    if user_info:
        additional_phones = user_info.get('additional_phones', [])
        additional_phones.append(message.text)

        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–∏–ª –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {message.text}")

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        update_user(message.from_user.id, additional_phones=additional_phones)

        await message.answer("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=get_profile_menu())
    else:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    await state.clear()

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
@router.message(Profile.change_address)
async def update_address(message: types.Message, state: FSMContext):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–∏–ª –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {message.text}")

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    update_user(message.from_user.id, address=message.text)

    await message.answer("–ê–¥—Ä–µ—Å –∏–∑–º–µ–Ω–µ–Ω.", reply_markup=get_profile_menu())
    await state.clear()

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏
@router.message(F.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è")
async def change_name(message: types.Message, state: FSMContext):
    logging.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª '–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è'")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:")
    await state.set_state(Profile.change_name)

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏
@router.message(Profile.change_name)
async def update_name(message: types.Message, state: FSMContext):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–∏–ª –∏–º—è: {message.text}")

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    update_user(message.from_user.id, name=message.text)

    await message.answer("–ò–º—è –∏–∑–º–µ–Ω–µ–Ω–æ.", reply_markup=get_profile_menu())
    await state.clear()
