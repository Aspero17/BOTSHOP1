import sqlite3
import logging
from aiogram import types, Router
from aiogram.fsm.context import FSMContext
from keyboards.admin import get_admin_menu
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import Command
from functools import wraps

router = Router()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

console_handler = logging.StreamHandler()
console_handler.setLevel(logging.INFO)
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
console_handler.setFormatter(formatter)
logger.addHandler(console_handler)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class AdminStates(StatesGroup):
    selecting_product = State()
    editing_product_name = State()
    editing_product_price = State()
    selecting_manufacturer = State()
    editing_manufacturer_name = State()
    adding_product = State()
    deleting_product = State()
    adding_manufacturer = State()

logger.info("–§–∞–π–ª admin.py –∑–∞–≥—Ä—É–∂–µ–Ω.")

ADMINS = [730393028, 987654321]

def is_admin(user_id: int) -> bool:
    return user_id in ADMINS

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def admin_only(handler):
    @wraps(handler)
    async def wrapper(message: types.Message, *args, **kwargs):
        if not is_admin(message.from_user.id):
            logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏–∏.")
            return await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return await handler(message, *args, **kwargs)
    return wrapper

# –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
class DatabaseConnection:
    def __enter__(self):
        self.conn = sqlite3.connect("data/products.db")
        self.cursor = self.conn.cursor()
        return self

    def __exit__(self, exc_type, exc_value, traceback):
        if exc_type is None:
            self.conn.commit()
        self.conn.close()

def get_all_products():
    with DatabaseConnection() as db:
        db.cursor.execute("SELECT id, name, price FROM products")
        return db.cursor.fetchall()

def get_all_manufacturers():
    with DatabaseConnection() as db:
        db.cursor.execute("SELECT id, name FROM manufacturers")
        return db.cursor.fetchall()

def update_product(product_id, new_name, new_price):
    with DatabaseConnection() as db:
        db.cursor.execute("UPDATE products SET name = ?, price = ? WHERE id = ?", (new_name, new_price, product_id))

def add_product_to_db(name, price):
    with DatabaseConnection() as db:
        db.cursor.execute("INSERT INTO products (name, price) VALUES (?, ?)", (name, price))

def delete_product_by_id(product_id):
    with DatabaseConnection() as db:
        db.cursor.execute("DELETE FROM products WHERE id = ?", (product_id,))
        return db.cursor.rowcount > 0

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏

@router.message(Command("adminpanelspb"))
async def admin_panel_command(message: types.Message, state: FSMContext):
    logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ –≤—ã–∑–≤–∞—Ç—å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}.")
    await state.clear()
    await state.set_state("admin_panel")
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å!", reply_markup=get_admin_menu())

@router.message(lambda message: message.text == "üì¶ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã")
@admin_only
async def view_all_products(message: types.Message):
    products = get_all_products()

    if not products:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.")
        return

    response = "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤:\n"
    for product in products:
        product_id, name, price = product
        response += f"ID: {product_id}, –ù–∞–∑–≤–∞–Ω–∏–µ: {name}, –¶–µ–Ω–∞: {price} —Ä—É–±.\n"

    max_length = 4096
    if len(response) > max_length:
        parts = [response[i:i + max_length] for i in range(0, len(response), max_length)]
        for part in parts:
            await message.answer(part)
    else:
        await message.answer(response)

@router.message(lambda message: message.text == "üë§ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π")
@admin_only
async def view_all_manufacturers(message: types.Message):
    manufacturers = get_all_manufacturers()
    if manufacturers:
        response = "\n".join([f"ID: {m[0]}, –ù–∞–∑–≤–∞–Ω–∏–µ: {m[1]}" for m in manufacturers])
        await message.answer(f"–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π:\n{response}")
        logging.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –≤—Å–µ—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π.")
    else:
        await message.answer("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        logging.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π, –Ω–æ –æ–Ω–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

@router.message(lambda message: message.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä")
@admin_only
async def select_product_to_edit(message: types.Message, state: FSMContext):
    logging.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞. –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {message.text}")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:")
    await state.set_state(AdminStates.selecting_product)



@router.message(AdminStates.selecting_product)
@admin_only
async def enter_product_id(message: types.Message, state: FSMContext):
    product_id = message.text
    with DatabaseConnection() as db:
        db.cursor.execute("SELECT name, price FROM products WHERE id = ?", (product_id,))
        product = db.cursor.fetchone()

    if product:
        await state.update_data(product_id=product_id, product_name=product[0], product_price=product[1])
        await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ–≤–∞—Ä:\n–ù–∞–∑–≤–∞–Ω–∏–µ: {product[0]}\n–¶–µ–Ω–∞: {product[1]} —Ä—É–±.")
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
        await state.set_state(AdminStates.editing_product_name)
        logging.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –≤—ã–±—Ä–∞–ª —Ç–æ–≤–∞—Ä —Å ID {product_id} –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
    else:
        await message.answer("–¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        logging.warning(f"–¢–æ–≤–∞—Ä —Å ID {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∞–¥–º–∏–Ω–æ–º {message.from_user.id}.")

