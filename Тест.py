from aiogram import Bot, Dispatcher, Router, types
from aiogram.filters import Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

API_TOKEN = '1789660026:AAFdRnH8x3bniLtVhyPucGkGAP1OtaUZz8U'

bot = Bot(token=API_TOKEN)
dp = Dispatcher()
router = Router()

def get_main_menu() -> ReplyKeyboardMarkup:
    kb_builder = ReplyKeyboardBuilder()
    kb_builder.button(text="üõí –¢–æ–≤–∞—Ä—ã")
    kb_builder.button(text="üõç –ö–æ—Ä–∑–∏–Ω–∞")
    kb_builder.row()
    kb_builder.button(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
    kb_builder.button(text="‚úâ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
    return kb_builder.as_markup(resize_keyboard=True)

@router.message(Command("start"))
async def start(message: types.Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_menu())

dp.include_router(router)

if __name__ == '__main__':
    dp.run_polling(bot)



###############–∫–æ—Ä–∑–∏–Ω–∞‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ


from aiogram import types, Router, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from utils.storage import user_data, initialize_user
from keyboards.cart import get_cart_keyboard
from utils.item_details import get_item_details

router = Router()

def format_cart(user_id: int) -> str:
    cart = user_data.get(user_id, {}).get('cart', {})
    if not cart:
        return "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞."

    total_cost = 0
    cart_items = []

    for item_id, item in cart.items():
        item_total = item['price'] * item['quantity']
        total_cost += item_total
        cart_items.append(f"{item['name']} - {item['quantity']} —à—Ç. –ø–æ {item['price']} —Ä—É–±. (–ò—Ç–æ–≥–æ: {item_total} —Ä—É–±.)")

    return "\n".join(cart_items) + f"\n\n–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_cost} —Ä—É–±."

@router.message(F.text == "üõç –ö–æ—Ä–∑–∏–Ω–∞")
async def show_cart(message: types.Message):
    user_id = message.from_user.id
    initialize_user(user_id)
    cart_info = format_cart(user_id)
    keyboard = get_cart_keyboard()  # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    await message.answer(cart_info, reply_markup=keyboard)


@router.message(F.text == "üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É")
async def clear_cart(message: types.Message):
    user_id = message.from_user.id
    initialize_user(user_id)
    user_data[user_id]['cart'] = {}
    await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –±—ã–ª–∞ –æ—á–∏—â–µ–Ω–∞.", reply_markup=get_cart_keyboard())

@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
async def add_item_to_cart(message: types.Message):
    user_id = message.from_user.id
    initialize_user(user_id)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'item_id 2'): ")

@router.message(F.text == "‚ûñ –£–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä")
async def remove_item_from_cart(message: types.Message):
    user_id = message.from_user.id
    initialize_user(user_id)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'item_id 1'): ")

@router.message()
async def process_add_remove_item(message: types.Message):
    user_id = message.from_user.id
    text = message.text.split()
    if len(text) < 2:
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ.")

    command = text[0]
    item_id = text[1]
    quantity = int(text[2]) if len(text) > 2 else 1

    if command == "‚ûï":  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ
        if item_id in user_data[user_id]['cart']:
            user_data[user_id]['cart'][item_id]['quantity'] += quantity
        else:
            item_details = get_item_details(item_id)
            user_data[user_id]['cart'][item_id] = item_details
            user_data[user_id]['cart'][item_id]['quantity'] = quantity
        await message.answer(f"–¢–æ–≤–∞—Ä {item_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É.")

    elif command == "‚ûñ":  # –£–¥–∞–ª–µ–Ω–∏–µ
        if item_id in user_data[user_id]['cart']:
            if user_data[user_id]['cart'][item_id]['quantity'] > quantity:
                user_data[user_id]['cart'][item_id]['quantity'] -= quantity
            else:
                del user_data[user_id]['cart'][item_id]
            await message.answer(f"–¢–æ–≤–∞—Ä {item_id} —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.")
        else:
            await message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ.")


####################

import logging
from aiogram import types, Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from keyboards.products import get_flour_keyboard
from keyboards.category import get_category_menu
from utils.storage import user_data, get_products_in_category
from keyboards.main import get_main_menu

router = Router()

class Goods(StatesGroup):
    category = State()
    products = State()

@router.message(F.text == "üõí –¢–æ–≤–∞—Ä—ã")
async def show_goods(message: types.Message, state: FSMContext):
    logging.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ä–∞–∑–¥–µ–ª '–¢–æ–≤–∞—Ä—ã'")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=get_category_menu())
    await state.set_state(Goods.category)



@router.message(F.text == "üçö –ú—É–∫–∞")
async def flour_menu(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è –º—É–∫–∏:", reply_markup=get_flour_keyboard())

@router.message(F.text.in_([
    "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å 1",
    "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å 2",
    "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å 3",
    "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å 4",
    "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å 5",
    "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å 6",
    "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å 7"
]))
async def show_flour_details(message: types.Message):
    manufacturer = message.text
    await message.answer(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {manufacturer}.")

@router.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def go_back(message: types.Message):
    await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π.", reply_markup=get_main_menu())


    ########## –≠–¢–û –§–ê–ô–õ GOODS

    import logging
    from aiogram import types, Router, F
    from aiogram.fsm.context import FSMContext
    from aiogram.fsm.state import State, StatesGroup
    from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
    from utils.functions import get_manufacturer_keyboard, get_products_in_category
    from keyboards.main import get_main_menu
    from keyboards.category import get_category_menu
    from utils.functions import get_products_in_category

    router = Router()

    class Goods(StatesGroup):
        category = State()
        manufacturer = State()
        product_selection = State()  # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞

    @router.message(F.text == "üõí –¢–æ–≤–∞—Ä—ã")
    async def show_goods(message: types.Message, state: FSMContext):
        logging.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ä–∞–∑–¥–µ–ª '–¢–æ–≤–∞—Ä—ã'")
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=get_category_menu())
        await state.set_state(Goods.category)

    @router.message(Goods.category)
    async def handle_category_selection(message: types.Message, state: FSMContext):
        category = message.text
        logging.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é: %s", category)

        if category == "üîô –ù–∞–∑–∞–¥":
            await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_menu())
            await state.clear()
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            keyboard = get_manufacturer_keyboard(category)
            if keyboard:
                category_name = get_category_name(category)  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
                await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ {category_name}:", reply_markup=keyboard)
                await state.set_state(Goods.manufacturer)
            else:
                await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", reply_markup=get_category_menu())

    def get_category_name(category_key):
        """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∫–ª—é—á—É."""
        category_names = {
            "flour": "–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è –º—É–∫–∏",
            "yeast": "–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è –¥—Ä–æ–∂–∂–µ–π",
            "butter": "–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è –º–∞—Å–ª–∞",
            "salt_soda_sugar": "–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è —Å–æ–ª–∏, —Å–æ–¥—ã –∏ —Å–∞—Ö–∞—Ä–∞",
            "eggs": "–ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ —è–∏—Ü",
            "rice": "–ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ —Ä–∏—Å–∞",
            "vinegar": "–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è —É–∫—Å—É—Å–∞",
            "spices": "–ø—Ä–∏–ø—Ä–∞–≤"
        }
        return category_names.get(category_key, "—Ç–æ–≤–∞—Ä—ã")

    @router.message(Goods.manufacturer)
    async def handle_manufacturer_selection(message: types.Message, state: FSMContext):
        manufacturer = message.text
        logging.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è: %s", manufacturer)

        if manufacturer == "üîô –ù–∞–∑–∞–¥":
            await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π.", reply_markup=get_category_menu())
            await state.set_state(Goods.category)
        else:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                category = get_products_in_category(await state.get_state())
                products = get_products_in_category(category)

                if not products:
                    await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö.")
                    return

                # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—é
                filtered_products = {
                    product_id: product_info
                    for product_id, product_info in products.items()
                    if product_info.get('manufacturer') == manufacturer
                }

                if filtered_products:
                    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
                    products_message = []
                    for product_id, product_info in filtered_products.items():
                        name = product_info['name']
                        price = product_info.get('price', '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')
                        button_text = f"{name} - {price} —Ä—É–±."
                        button = InlineKeyboardButton(button_text, callback_data=f"select_product:{product_id}")
                        products_message.append(button)

                    markup = InlineKeyboardMarkup(row_width=1)
                    markup.add(*products_message)
                    markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_category"))

                    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É:", reply_markup=markup)
                    await state.set_state(Goods.product_selection)
                else:
                    await message.answer(f"–ü—Ä–æ–¥—É–∫—Ç—ã –æ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è '{manufacturer}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                                         reply_markup=get_manufacturer_keyboard(category))
            except Exception as e:
                logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è: %s", e)
                await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                                     reply_markup=get_manufacturer_keyboard(category))

    @router.callback_query(lambda c: c.data and c.data.startswith('select_product:'))
    async def select_product(callback: types.CallbackQuery, state: FSMContext):
        product_id = callback.data.split(':')[1]
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç –∏ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        await state.update_data(product_id=product_id)
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:")
        await state.set_state(Goods.product_selection)

    @router.message(Goods.product_selection)
    async def handle_product_quantity(message: types.Message, state: FSMContext):
        try:
            quantity = int(message.text)
            user_data = await state.get_data()
            product_id = user_data.get('product_id')

            # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
            # –ù–∞–ø—Ä–∏–º–µ—Ä, –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

            await message.answer(f"–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}")
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=get_category_menu())
            await state.clear()
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")



################## –§–ê–ô–õ FUNCTIONS

from aiogram.types import KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import ReplyKeyboardBuilder
import logging
import json


def get_manufacturer_keyboard(category):
    try:
        with open('data/categories.json', 'r', encoding='utf-8') as file:
            data = json.load(file)
    except FileNotFoundError:
        logging.error("–§–∞–π–ª 'data/categories.json' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return None
    except json.JSONDecodeError:
        logging.error("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON.")
        return None
    except Exception as e:
        logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        return None

    category_data = data['categories'].get(category)
    if not category_data:
        logging.error(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ñ–∞–π–ª–µ.")
        return None

    manufacturers = category_data.get('manufacturers', [])
    products = category_data.get('products', {})

    keyboard = ReplyKeyboardBuilder()

    if manufacturers:
        for manufacturer in manufacturers:
            keyboard.row(KeyboardButton(text=manufacturer))
    else:
        for product_key, product_info in products.items():
            product_name = product_info['name']
            price = product_info.get('price')
            if price is not None:
                product_name += f" - {price} —Ä—É–±."
            keyboard.row(KeyboardButton(text=product_name))

    keyboard.row(KeyboardButton(text="üîô –ù–∞–∑–∞–¥"))

    return keyboard.as_markup(resize_keyboard=True)


def get_products_in_category(category):
    try:
        with open('data/categories.json', 'r', encoding='utf-8') as file:
            data = json.load(file)
    except FileNotFoundError:
        logging.error("–§–∞–π–ª 'data/categories.json' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return None
    except json.JSONDecodeError:
        logging.error("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON.")
        return None
    except Exception as e:
        logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        return None

    category_data = data['categories'].get(category)
    if not category_data:
        logging.error(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ñ–∞–π–ª–µ.")
        return None

    return category_data.get('products', {})


def get_flour_types_keyboard(products):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∏–¥–æ–≤ –º—É–∫–∏."""
    keyboard = ReplyKeyboardBuilder()

    for product_key, product_info in products.items():
        product_name = product_info['name']
        price = product_info.get('price', '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')
        button_text = f"{product_name} - {price} —Ä—É–±."
        keyboard.row(KeyboardButton(text=button_text))

    keyboard.row(KeyboardButton(text="üîô –ù–∞–∑–∞–¥"))

    return keyboard.as_markup(resize_keyboard=True)


def get_add_to_cart_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É."""
    quantities = [1, 2, 3, 5, 10]
    keyboard = ReplyKeyboardBuilder()

    for quantity in quantities:
        keyboard.row(KeyboardButton(text=f"{quantity} —à—Ç."))

    keyboard.row(KeyboardButton(text="üîô –ù–∞–∑–∞–¥"))
    return keyboard.as_markup(resize_keyboard=True)


def get_product_preview_keyboard(products):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞."""
    keyboard = InlineKeyboardMarkup(row_width=1)

    for product_id, product_info in products.items():
        name = product_info['name']
        price = product_info.get('price', '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')
        button_text = f"{name} - {price} —Ä—É–±."
        button = InlineKeyboardButton(button_text, callback_data=f"select_product:{product_id}")
        keyboard.add(button)

    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_category"))

    return keyboard



################# –§–ê–ô–õ GOODS

import logging
from aiogram import types, Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from keyboards.main import get_main_menu
from keyboards.category import get_category_menu
from TEST.database import get_manufacturers, get_products_by_manufacturer

router = Router()

class Goods(StatesGroup):
    category = State()
    manufacturer = State()
    product_selection = State()  # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞

@router.message(F.text == "üõí –¢–æ–≤–∞—Ä—ã")
async def show_goods(message: types.Message, state: FSMContext):
    logging.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ä–∞–∑–¥–µ–ª '–¢–æ–≤–∞—Ä—ã'")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=get_category_menu())
    await state.set_state(Goods.category)

@router.message(Goods.category)
async def handle_category_selection(message: types.Message, state: FSMContext):
    category = message.text
    logging.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é: %s", category)

    if category == "üîô –ù–∞–∑–∞–¥":
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_menu())
        await state.clear()
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        manufacturers = get_manufacturers(category)
        if manufacturers:
            keyboard = InlineKeyboardMarkup(row_width=1)
            for manufacturer in manufacturers:
                button = InlineKeyboardButton(manufacturer, callback_data=f"select_manufacturer:{manufacturer}")
                keyboard.add(button)
            keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu"))
            await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}':", reply_markup=keyboard)
            await state.set_state(Goods.manufacturer)
        else:
            await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", reply_markup=get_category_menu())

@router.callback_query(lambda c: c.data and c.data.startswith('select_manufacturer:'))
async def handle_manufacturer_selection(callback: types.CallbackQuery, state: FSMContext):
    manufacturer = callback.data.split(':')[1]
    logging.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è: %s", manufacturer)

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è
        products = get_products_by_manufacturer(manufacturer)

        if not products:
            await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö.")
            return

        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        products_message = []
        for product in products:
            name = product['name']
            price = product.get('price', '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')
            button_text = f"{name} - {price} —Ä—É–±."
            button = InlineKeyboardButton(button_text, callback_data=f"select_product:{product['id']}")
            products_message.append(button)

        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(*products_message)
        markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_category"))

        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É:", reply_markup=markup)
        await state.set_state(Goods.product_selection)
    except Exception as e:
        logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è: %s", e)
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=get_category_menu())

@router.callback_query(lambda c: c.data and c.data.startswith('select_product:'))
async def select_product(callback: types.CallbackQuery, state: FSMContext):
    product_id = callback.data.split(':')[1]
    # –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç –∏ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    await state.update_data(product_id=product_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(Goods.product_selection)

@router.message(Goods.product_selection)
async def handle_product_quantity(message: types.Message, state: FSMContext):
    try:
        quantity = int(message.text)
        user_data = await state.get_data()
        product_id = user_data.get('product_id')

        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

        await message.answer(f"–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}")
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=get_category_menu())
        await state.clear()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
